//Patch
//BOCK
var primordials = require("./per_context/primordials.js");var process = require("./process.js");const { NumberMAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER, NumberIsInteger } =
  primordials;
module.exports.validateInteger = (
  value,
  name,
  min = NumberMIN_SAFE_INTEGER,
  max = NumberMAX_SAFE_INTEGER
) => {
  if (typeof value !== "number")
    throw new TypeError(
      `Invalid arg type. Expected ${name} to be of type number, but got ${value}`
    );
  if (!NumberIsInteger(value))
    throw new /*ERR_OUT_OF_RANGE(name, 'an integer', value)*/ Error(
      `expected ${name} to be integer but got ${value}`
    );
  if (value < min || value > max)
    throw new RangeError(
      `Expected ${name} to be >= ${min} && <= ${max} but got ${value}.`
    );
};
const kValidateObjectNone = 0;
const kValidateObjectAllowNullable = 1 << 0;
const kValidateObjectAllowArray = 1 << 1;
const kValidateObjectAllowFunction = 1 << 2;
  kValidateObjectAllowFunction;
module.exports.validateObject = (
  value,
  name,
  options = kValidateObjectNone
) => {
  if (options === kValidateObjectNone) {
    if (value === null || ArrayIsArray(value)) {
      throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
    }

    if (typeof value !== "object") {
      throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
    }
  } else {
    const throwOnNullable = (kValidateObjectAllowNullable & options) === 0;

    if (throwOnNullable && value === null) {
      throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
    }

    const throwOnArray = (kValidateObjectAllowArray & options) === 0;

    if (throwOnArray && ArrayIsArray(value)) {
      throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
    }

    const throwOnFunction = (kValidateObjectAllowFunction & options) === 0;
    const typeofValue = typeof value;

    if (
      typeofValue !== "object" &&
      (throwOnFunction || typeofValue !== "function")
    ) {
      throw new ERR_INVALID_ARG_TYPE(name, "Object", value);
    }
  }
};
